// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ValueChanged extends ethereum.Event {
  get params(): ValueChanged__Params {
    return new ValueChanged__Params(this);
  }
}

export class ValueChanged__Params {
  _event: ValueChanged;

  constructor(event: ValueChanged) {
    this._event = event;
  }

  get newValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class swapExecuted extends ethereum.Event {
  get params(): swapExecuted__Params {
    return new swapExecuted__Params(this);
  }
}

export class swapExecuted__Params {
  _event: swapExecuted;

  constructor(event: swapExecuted) {
    this._event = event;
  }

  get newSwap(): swapExecutedNewSwapStruct {
    return changetype<swapExecutedNewSwapStruct>(
      this._event.parameters[0].value.toTuple(),
    );
  }
}

export class swapExecutedNewSwapStruct extends ethereum.Tuple {
  get tokenBuy(): Address {
    return this[0].toAddress();
  }

  get tokenSell(): Address {
    return this[1].toAddress();
  }

  get value(): BigInt {
    return this[2].toBigInt();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }
}

export class SimpleAccountContract extends ethereum.SmartContract {
  static bind(address: Address): SimpleAccountContract {
    return new SimpleAccountContract("SimpleAccountContract", address);
  }

  fAddress(): Address {
    let result = super.call("fAddress", "fAddress():(address)", []);

    return result[0].toAddress();
  }

  try_fAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("fAddress", "fAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVariable(): BigInt {
    let result = super.call("getVariable", "getVariable():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getVariable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getVariable", "getVariable():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initialValue(): BigInt {
    let result = super.call("initialValue", "initialValue():(uint256)", []);

    return result[0].toBigInt();
  }

  try_initialValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("initialValue", "initialValue():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  subscribed(): Address {
    let result = super.call("subscribed", "subscribed():(address)", []);

    return result[0].toAddress();
  }

  try_subscribed(): ethereum.CallResult<Address> {
    let result = super.tryCall("subscribed", "subscribed():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _initialValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _subscribed(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DoSwapCall extends ethereum.Call {
  get inputs(): DoSwapCall__Inputs {
    return new DoSwapCall__Inputs(this);
  }

  get outputs(): DoSwapCall__Outputs {
    return new DoSwapCall__Outputs(this);
  }
}

export class DoSwapCall__Inputs {
  _call: DoSwapCall;

  constructor(call: DoSwapCall) {
    this._call = call;
  }

  get tokenBuy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenSell(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class DoSwapCall__Outputs {
  _call: DoSwapCall;

  constructor(call: DoSwapCall) {
    this._call = call;
  }
}

export class SetVariableCall extends ethereum.Call {
  get inputs(): SetVariableCall__Inputs {
    return new SetVariableCall__Inputs(this);
  }

  get outputs(): SetVariableCall__Outputs {
    return new SetVariableCall__Outputs(this);
  }
}

export class SetVariableCall__Inputs {
  _call: SetVariableCall;

  constructor(call: SetVariableCall) {
    this._call = call;
  }

  get newValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetVariableCall__Outputs {
  _call: SetVariableCall;

  constructor(call: SetVariableCall) {
    this._call = call;
  }
}
